# 多クラス画像分類器
chainerのexampleを改造したもの
画像の多クラス分類を実行する
環境：ubuntu14.04, python2.7, chainer1.14.0

こちらの方々のソースコードを更に改変したものです：
http://d.hatena.ne.jp/shi3z/20150709/1436397615
http://hi-king.hatenablog.com/entry/2015/06/11/021144

下記の手順を実行して下さい。


1ディレクトリ中にクラスの名前を持つフォルダが複数入ったようなデータセットを用意して下さい。
それぞれのクラスディレクトリの画像は手動で分類されているものとします。
（このように）


データセット  
|  
|ークラス１
|　　|ー画像１   
|    ー画像２  
|  
|ークラス２  


このファイル（README）と同じ階層で、

$ python 01_make_train_data.py データセットフォルダ名
データセット中の画像が１つのディレクトリ「images」にコピーされ、画像はリネームされます。
また、train.txt, test.txt, label.txt の３つのファイルが作成されます。


$ python 02_crop.py images cropedImages  
「images」フォルダに格納された画像を256*256にリサイズし、新たなディレクトリ「cropedImages」にコピーします。


ここで、test.txtとtrain.txtのパスを手動（ctrl+h）で修正します。
images　すべてを　cropedImages　に


$python 03_compute_mean.py train.txt 
正規化のための平均画像「mean.npy」が作成されます。


$python 04_train_imagenet.py -g 0 -E 200 train.txt test.txt  
学習プログラムです。
-g 0　はGPU（ID=0）を使用することを意味します。-1がCPUです。
-e はエポック数です。
graph.dot, graph.wo_split.dot が出力されます。これらはこのプログラムのニューラルネットの構造を表しています。
plot.json, plotV.json　が出力されます。これらはログファイルですが、作成中です。ログ出力処理を作成するか、無視して下さい。
sigma.npy が作成されます。このファイルは平均０，分散１に正規化するための標準偏差（シグマ）を保存しています。


$python 05_resize.py yourPicture.jpg  
学習済みモデルを検証する際に使用します。任意の画像を２５６*２５６にリサイズして、ファイル名の頭に「r_」を付加して保存します。


$python 06_inspection.py r_yourPicture.jpg  
学習済みモデルで分類を行います。
画像を入力すると、画像中に写った物体の確率を出力します。

//----------------------------------------------------------------------------------------

# Multiclass Image Classifier
modified Chainer example  
performs multiclass classification of images  
Ubuntu14.04, Python2.7, and Chainer1.14.0  

refer:
http://d.hatena.ne.jp/shi3z/20150709/1436397615
http://hi-king.hatenablog.com/entry/2015/06/11/021144


To use, execute instructions below.  


You have to prepare dataset that one directory has some directories named as class name.  
Each class directories has manually classified pictures.   
(something like this)

dataset  
|  
|ーclass1  
|　　|ーimage1   
|    ーimage2  
|  
|ーclass2  



At the same directory of this file,  


$ python 01_make_train_data.py yourDatasetDirectoryName
your pictures in dataset will be copied into new one directory "images", and name of the pictures are changed.also train.txt,   test.txt, and label.txt will be created.  


$ python 02_crop.py images cropedImages  
crop your pictures in "images" into 256*256px,and stored into a new directory "cropedImages".  


edit your test.txt and train.txt's path manually(ctrl + h).  
images -> cropedImages  


$python 03_compute_mean.py train.txt  
mean image will be created as "mean.npy"  


$python 04_train_imagenet.py -g 0 -E 200 train.txt test.txt  
this is a learning part.  
"-g 0" means use GPU(ID=0). -1 means CPU.  
"-E" means epoch times.  
"graph.dot", "graph.wo_split.dot" are created. these file discribes the structue of your neuralnets.  
"modelhdf5" is created. this is the parameter file containing all value in your neuralnets.  
"plot.json", "plotV.json" are created. these are log file. but under construction. please code the process or ignore them.  
"sigma.npy" is created. this stores standard deviation (sigma) in order to normalize dataset (mean=0, variance=1).  


$python 05_resize.py yourPicture.jpg  
this is optional. resize your image into 256*256, and save new image as  "_r"+yourPicture.jpg  
this require you openCV has been installed.  


$python 06_inspection.py r_yourPicture.jpg  
this is a classifier.  
input your image, and this returns the probability of the subject in the image.  


